#!/bin/bash

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

PS3=$'\e[01;33mChoice: \e[0m' # yellow prompt
# colors
NC='\033[0m' # No Color
RED='\033[0;31m'
GREEN='\033[0;32m'
BROWN='\033[0;33m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHT_GRAY='\033[0;37m'
DARK_GRAY='\033[1;30m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHT_BLUE='\033[1;34m'
LIGHT_PURPLE='\033[1;35m'
LIGHT_CYAN='\033[1;36m'
WHITE='\033[1;36m'
COLORS=("RED" "GREEN" "BROWN" "ORANGE" "BLUE" "PURPLE" "CYAN" "LIGHT_GRAY" "LIGHT_RED" "LIGHT_GREEN" "YELLOW" "LIGHT_BLUE" "LIGHT_PURPLE" "LIGHT_CYAN" "WHITE")

# get terminal dimensions
columns=$(tput cols)

separator=$(printf "%${columns}s")

read_csv() {
    options=()
    if [[ -z $csv_file ]]; then
        csv_file="pastas.csv"
        if [[ -f $csv_file ]]; then
            :
        else
            csv_file=/usr/local/share/copypasta/pastas.csv
            if [[ -f $csv_file ]]; then
                :
            else
                csv_file=~/.local/share/copypasta/pastas.csv
                if [[ -f $csv_file ]]; then
                    :
                else
                    echo No csv file found && exit
                fi
            fi
        fi
    fi
    if [[ -f $csv_file ]]; then
        :
    else
        echo "$csv_file" does not exist && exit; fi

    while IFS="," read -r rec_column1 rec_column2
    do
        var=$(fold -sw $columns <<< $rec_column2)
        IFS= read -r -d '' "$rec_column1" <<< "$var"
        options+=("$rec_column1")
    done < <(tail -n +2 $csv_file)
}

show_dmenu() {
    choice=$(printf "%s\n" "${options[@]}" | dmenu )
    echo -e ${!choice} | xclip -selection clipboard # copy to clipboard
    exit
}


show_help() {
    if [[ -z $COLOR ]]; then COLOR="PURPLE"; fi
    echo -e "${!COLOR}"
    printf "\
Usage: copypasta [options]

Options:
    -help: Show this help
    -color: Which color the text will show up as
    -dmenu: Use dmenu to select and copy pastas to clipboard
    -show-all: Show all copypastas
    -csv-file: Select which csv to use

"
    exit
}


show_menu() {
    select opt in "${options[@]}"
    do
        if [[ -z $COLOR ]]; then COLOR="PURPLE"; fi
        echo -e "${!COLOR}"
        if [ -z "$opt" ]; then echo "Invalid Option"; exit; fi
        echo -e "${!opt}"
        break
    done
    exit
}

show_all() {
    if [[ -z $COLOR ]]; then SET_COLOR="n"; fi
    for opt in "${options[@]}"
    do
        echo -e "\t \e[4m${opt}\e[0m"
        color=${COLORS[$RANDOM % ${#COLORS[@]} ]}
        if [[ $SET_COLOR != "n" ]]; then echo -e "${!COLOR}"; fi
        if [[ $SET_COLOR == "n" ]]; then echo -e "${!color}"; fi
        echo -e "${!opt}"
        echo -e "${NC}${separator// /=}"
    done
    exit
}

if [[ -z $1 ]]; then read_csv && show_menu; fi

while [[ "$1" ]]; do
    case $1 in
        "-color")
            COLOR="$(echo "$2" | tr '[:lower:]' '[:upper:]')"
            shift
            ;;
        "-csv-file")
            csv_file="$(echo "$2")"
            shift
            ;;
        "-show-all")
            read_csv
            show_all
            ;;
        "-help" | "-h")
            show_help
            ;;
        "-dmenu")
            read_csv
            show_dmenu
            ;;
        *)
            echo "Invalid Argument"
            show_help
            ;;
    esac
    shift
done

read_csv
show_menu

# vim:nowrap

